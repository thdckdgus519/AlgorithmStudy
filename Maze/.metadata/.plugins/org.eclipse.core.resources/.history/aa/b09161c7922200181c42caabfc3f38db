import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main
{
	static int maze[][];
	static Queue<Node> queue;
	static int visited[];
	
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		
		int maze_x = sc.nextInt();
		int maze_y = sc.nextInt();
		
		maze = new int[maze_x][maze_y];
		queue = new LinkedList<Node>();
		visited = new int[maze_x * maze_y];
		
		for(int i = 0 ; i < maze_x ; i++)
		{
			String input = sc.next();
			for(int j = 0 ; j < maze_y ; j++)
			{
				maze[i][j] = input.charAt(j) - 48;
			}
		}
		
		int result = bfs(maze_x - 1, maze_y - 1);


		System.out.println(result);
	}
	
	
	public static int bfs(int end_1, int end_2)
	{
		visited[0] = 1;
		queue.add(new Node(0,0,1));
		Node v = null;
		
		while(!queue.isEmpty())
		{
			v = queue.remove();
			visited[6*v.y + v.x] = 1;
			
			if(v.y == end_1 && v.x == end_2)
			{
				break;
			}
			else
			{
				if( (v.x+1 <= end_2) && (maze[v.y][v.x+1] == 1) && (visited[6*v.y + (v.x+1)] == 0) )
				{
					queue.add(new Node(v.y, v.x+1, v.cnt+1));
				}
				if( (v.y+1 <= end_1) && (maze[v.y+1][v.x] == 1) && (visited[6*(v.y+1) + v.x] == 0) )
				{
					queue.add(new Node(v.y+1, v.x, v.cnt+1));
				}
				if( (v.y-1 >= 0) && (maze[v.y-1][v.x] == 1) && (visited[6*(v.y-1) + v.x] == 0) )
				{
					queue.add(new Node(v.y-1, v.x, v.cnt+1));
				}
				if( (v.x-1 >= 0) && (maze[v.y][v.x-1] == 1) && (visited[6*(v.y) + (v.x-1)] == 0) )
				{
					queue.add(new Node(v.y, v.x-1, v.cnt+1));
				}
			}
		}
		return v.cnt;
	}
}




class Node
{
	int x;
	int y;
	int cnt;
	
	public Node(int y, int x, int cnt)
	{
		this.y = y;
		this.x = x;
		this.cnt = cnt;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getCnt() {
		return cnt;
	}

	public void setCnt(int cnt) {
		this.cnt = cnt;
	}
}